'2021-05-18T18:27:02.202000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:26:34: actual for formal object with mode in cannot depend on variable
    input "StackSize" (SPARK RM 4.4(2))[#1]

    main.adb:33:06: high: constant with variable input "Max_Size" must be listed in
    the Global aspect of "Main" (SPARK RM 6.1.4(14))[#0]

    gnatprove: error during flow analysis and proof

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T18:27:02.202000'
'2021-05-18T18:27:59.028000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:26:34: actual for formal object with mode in cannot depend on variable
    input "StackSize" (SPARK RM 4.4(2))[#1]

    main.adb:33:06: high: constant with variable input "Max_Size" must be listed in
    the Global aspect of "Main" (SPARK RM 6.1.4(14))[#0]

    gnatprove: error during flow analysis and proof

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T18:27:59.028000'
'2021-05-18T18:28:11.853000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All Sources
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:26:34: actual for formal object with mode in cannot depend on variable
    input "StackSize" (SPARK RM 4.4(2))[#1]

    main.adb:33:06: high: constant with variable input "Max_Size" must be listed in
    the Global aspect of "Main" (SPARK RM 6.1.4(14))[#0]

    gnatprove: error during flow analysis and proof

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T18:28:11.853000'
'2021-05-18T18:28:39.545000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:26:34: actual for formal object with mode in cannot depend on variable
    input "StackSize" (SPARK RM 4.4(2))[#1]

    main.adb:33:06: high: constant with variable input "Max_Size" must be listed in
    the Global aspect of "Main" (SPARK RM 6.1.4(14))[#0]

    gnatprove: error during flow analysis and proof

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T18:28:39.545000'
'2021-05-18T19:11:03.877000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:26:34: actual for formal object with mode in cannot depend on variable
    input "StackSize" (SPARK RM 4.4(2))[#1]

    main.adb:33:06: high: constant with variable input "Max_Size" must be listed in
    the Global aspect of "Main" (SPARK RM 6.1.4(14))[#0]

    gnatprove: error during flow analysis and proof

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T19:11:03.877000'
'2021-05-18T19:12:40.377000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:26:34: actual for formal object with mode in cannot depend on variable
    input "StackSize" (SPARK RM 4.4(2))[#1]

    main.adb:33:06: high: constant with variable input "Max_Size" must be listed in
    the Global aspect of "Main" (SPARK RM 6.1.4(14))[#0]

    gnatprove: error during flow analysis and proof

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T19:12:40.377000'
'2021-05-18T19:12:58.979000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Examine All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: analysis of data and information flow ...

    main.adb:26:34: actual for formal object with mode in cannot depend on variable
    input "StackSize" (SPARK RM 4.4(2))[#1]

    main.adb:33:06: high: constant with variable input "Max_Size" must be listed in
    the Global aspect of "Main" (SPARK RM 6.1.4(14))[#0]

    gnatprove: error during analysis of data and information flow

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T19:12:58.979000'
'2021-05-18T19:58:20.585000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:35:25: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 1)[#1]

    main.adb:77:50: medium: precondition might fail, cannot prove S(I) >= ''0'' (e.g.
    when I = 4 and Input = (Length => 4, Str => (others => ''NUL'')))[#2]

    main.adb:95:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (others => '':'') and InputPINString''First =
    1 and InputPINString''Last = 4) [possible explanation: loop at line 42 should
    mention InputPINString in a loop invariant][#3]

    main.adb:117:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:135:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#9]

    main.adb:137:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#12]

    main.adb:139:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#11]

    main.adb:142:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#10]

    main.adb:156:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#8]

    main.adb:160:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 42 should mention VariableName
    and DB in a loop invariant][#7]

    main.adb:170:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => -1)))[#6]

    main.adb:173:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => -1))) [possible explanation: loop at line 42 should mention
    Stack in a loop invariant][#5]

    main.adb:181:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#4]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T19:58:20.585000'
'2021-05-18T20:21:42.414000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:30:40: medium: precondition might fail, cannot prove Number <= (Argument_Count)
    (e.g. when InputString''First = 0 and InputString''Last = 0)[#1]

    main.adb:42:25: medium: precondition might fail, cannot prove S'' Length = 4 (e.g.
    when InputString = (others => ''0'') and InputString''First = 1 and InputString''Last
    = 1)[#2]

    main.adb:84:50: medium: precondition might fail, cannot prove S(I) >= ''0'' (e.g.
    when I = 4 and Input = (Length => 4, Str => (4 => ''NUL'', others => ''0'')))[#3]

    main.adb:102:40: medium: precondition might fail, cannot prove S(I) >= ''0'' (e.g.
    when I = 0 and InputPINString = (5 => ''0'', others => ''NUL'') and InputPINString''First
    = 1 and InputPINString''Last = 4) [possible explanation: loop at line 49 should
    mention InputPINString in a loop invariant][#4]

    main.adb:124:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:142:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#10]

    main.adb:144:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#13]

    main.adb:146:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#12]

    main.adb:149:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#11]

    main.adb:163:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#9]

    main.adb:167:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''0''))) [possible explanation: loop at line 49 should mention VariableName and
    DB in a loop invariant][#8]

    main.adb:177:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#7]

    main.adb:180:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''0''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#6]

    main.adb:188:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#5]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T20:21:42.414000'
'2021-05-18T20:24:38.672000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:30:04: warning: initialization of "InputString" has no effect[#0]

    main.adb:36:35: medium: length check might fail[#5]

    main.adb:37:27: warning: loop range is null, loop will not execute

    main.adb:37:34: warning: statement has no effect[#1]

    main.adb:38:10: warning: this statement is never reached[#3]

    main.adb:39:13: warning: this statement is never reached[#4]

    main.adb:43:25: medium: precondition might fail, cannot prove S'' Length = 4 (e.g.
    when InputString = (others => ''NUL''))[#6]

    main.adb:85:50: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 4 and Input = (Length => 4, Str => (others => '':'')))[#7]

    main.adb:103:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (others => '':'') and InputPINString''First =
    1 and InputPINString''Last = 4) [possible explanation: loop at line 50 should
    mention InputPINString in a loop invariant][#8]

    main.adb:125:36: warning: unused assignment to "poppedInteger"[#2]

    main.adb:143:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#14]

    main.adb:145:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#17]

    main.adb:147:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#16]

    main.adb:150:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#15]

    main.adb:164:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#13]

    main.adb:168:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 50 should mention VariableName
    and DB in a loop invariant][#12]

    main.adb:178:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => -1)))[#11]

    main.adb:181:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => -1))) [possible explanation: loop at line 50 should mention
    Stack in a loop invariant][#10]

    main.adb:189:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#9]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T20:24:38.672000'
'2021-05-18T20:27:00.771000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:35:25: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 1)[#1]

    main.adb:77:50: medium: precondition might fail, cannot prove S(I) >= ''0'' (e.g.
    when I = 4 and Input = (Length => 4, Str => (others => ''NUL'')))[#2]

    main.adb:95:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (others => '':'') and InputPINString''First =
    1 and InputPINString''Last = 4) [possible explanation: loop at line 42 should
    mention InputPINString in a loop invariant][#3]

    main.adb:117:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:135:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#9]

    main.adb:137:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#12]

    main.adb:139:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#11]

    main.adb:142:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#10]

    main.adb:156:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#8]

    main.adb:160:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 42 should mention VariableName
    and DB in a loop invariant][#7]

    main.adb:170:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => -1)))[#6]

    main.adb:173:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => -1))) [possible explanation: loop at line 42 should mention
    Stack in a loop invariant][#5]

    main.adb:181:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#4]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T20:27:00.771000'
'2021-05-18T20:44:34.873000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:48:28: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 1 and S = (2 => ''9'', others => '':'') and S''First = 1 and S''Last
    = 2)[#1]

    main.adb:92:50: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 4 and Input = (Length => 4, Str => (4 => '':'', others => ''0'')))[#2]

    main.adb:110:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (5 => ''0'', others => '':'') and InputPINString''First
    = 1 and InputPINString''Last = 4) [possible explanation: loop at line 57 should
    mention InputPINString in a loop invariant][#3]

    main.adb:132:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#9]

    main.adb:152:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#12]

    main.adb:154:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#11]

    main.adb:157:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#10]

    main.adb:171:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#8]

    main.adb:175:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''0''))) [possible explanation: loop at line 57 should mention VariableName and
    DB in a loop invariant][#7]

    main.adb:185:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#6]

    main.adb:188:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''0''))) [possible explanation: loop at line 57 should
    mention Stack in a loop invariant][#5]

    main.adb:196:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#4]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T20:44:34.873000'
'2021-05-18T20:45:45.410000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove All
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:42:39: medium: loop invariant might not be preserved by an arbitrary
    iteration, cannot prove Ch >= ''0'' (e.g. when Ch = ''NUL'')[#2]

    main.adb:42:53: medium: loop invariant might fail in first iteration, cannot prove
    Ch <= ''9'' (e.g. when Ch = '':'')[#1]

    main.adb:49:28: medium: precondition might fail, cannot prove S'' Length = 4 (e.g.
    when S = (others => ''NUL'') and S''First = 1 and S''Last = 1)[#3]

    main.adb:93:50: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 4 and Input = (Length => 4, Str => (1 => ''NUL'', others => '':'')))[#4]

    main.adb:111:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (1 => ''NUL'', others => '':'') and InputPINString''First
    = 1 and InputPINString''Last = 4) [possible explanation: loop at line 58 should
    mention InputPINString in a loop invariant][#5]

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:151:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#11]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#14]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#13]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#12]

    main.adb:172:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#10]

    main.adb:176:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 58 should mention VariableName
    and DB in a loop invariant][#9]

    main.adb:186:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#8]

    main.adb:189:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''NUL''))) [possible explanation: loop at line 58 should
    mention Stack in a loop invariant][#7]

    main.adb:197:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#6]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T20:45:45.410000'
'2021-05-18T20:48:56.673000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove Line
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:40:28: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 1 and S = (others => '':'') and S''First = 1 and S''Last = 1)[#0]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T20:48:56.673000'
'2021-05-18T21:17:07.061000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove Line
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:50:28: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 1 and S = (2 => ''9'', others => '':'') and S''First = 1 and S''Last
    = 2)[#0]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:17:07.061000'
'2021-05-18T21:17:56.442000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:51:31: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 1 and S = (2 => ''9'', others => '':'') and S''First = 1 and S''Last
    = 2)[#4]

    main.adb:62:10: medium: "LockedState" might not be initialized[#3]

    main.adb:92:13: medium: "LockedState" might not be initialized[#2]

    main.adb:96:50: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 4 and Input = (Length => 4, Str => (others => '':'')))[#5]

    main.adb:98:45: medium: "PINOriginal" might not be initialized[#1]

    main.adb:114:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (others => '':'') and InputPINString''First =
    1 and InputPINString''Last = 4) [possible explanation: loop at line 61 should
    mention InputPINString in a loop invariant][#6]

    main.adb:136:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:154:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#12]

    main.adb:156:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#15]

    main.adb:158:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#14]

    main.adb:161:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#13]

    main.adb:175:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#11]

    main.adb:179:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 61 should mention VariableName
    and DB in a loop invariant][#10]

    main.adb:189:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => -1)))[#9]

    main.adb:192:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => -1))) [possible explanation: loop at line 61 should mention
    Stack in a loop invariant][#8]

    main.adb:200:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#7]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:17:56.442000'
'2021-05-18T21:22:03.335000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    main.adb:39:22: illegal character

    main.adb:40:21: "=" should be ":="

    gnatprove: error during generation of Global contracts

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:22:03.335000'
'2021-05-18T21:22:18.115000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove Line
  output: 'Phase 1 of 2: generation of Global contracts ...

    main.adb:39:22: illegal character

    gnatprove: error during generation of Global contracts

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:22:18.115000'
'2021-05-18T21:22:29.665000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove Line
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:55:31: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 1 and S = (4 => ''0'', others => '':'') and S''First = 1 and S''Last
    = 4)[#0]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:22:29.665000'
'2021-05-18T21:32:03.300000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove Line
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:32:03.300000'
'2021-05-18T21:34:54.129000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove Line
  output: 'Phase 1 of 2: generation of Global contracts ...

    main.adb:54:06: missing "end if;" for "if" at line 39

    gnatprove: error during generation of Global contracts

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:34:54.129000'
'2021-05-18T21:35:30.710000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove Line
  output: 'Phase 1 of 2: generation of Global contracts ...

    main.adb:40:13: "IsValid" is undefined (more references follow)

    gnatprove: error during generation of Global contracts

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:35:30.710000'
'2021-05-18T21:35:56.165000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove Line
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:35:56.165000'
'2021-05-18T21:50:03.871000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:42:32: medium: array index check might fail (e.g. when S''First = 2)[#4]

    main.adb:43:31: medium: array index check might fail (e.g. when S''First = 3)[#5]

    main.adb:44:31: medium: array index check might fail (e.g. when S''First = 4)[#6]

    main.adb:45:31: medium: array index check might fail (e.g. when S''First = 5)[#7]

    main.adb:62:10: medium: "LockedState" might not be initialized[#3]

    main.adb:92:13: medium: "LockedState" might not be initialized[#2]

    main.adb:96:50: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 4 and Input = (Length => 4, Str => (1 => ''9'', 2 => ''9'', 3 => ''9'',
    4 => '':'', others => ''9'')))[#8]

    main.adb:98:45: medium: "PINOriginal" might not be initialized[#1]

    main.adb:114:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (1 => ''0'', 2 => ''0'', 3 => ''0'', 4 => ''0'',
    others => '':'') and InputPINString''First = 1 and InputPINString''Last = 4) [possible
    explanation: loop at line 61 should mention InputPINString in a loop invariant][#9]

    main.adb:136:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:154:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#15]

    main.adb:156:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#18]

    main.adb:158:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#17]

    main.adb:161:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#16]

    main.adb:175:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#14]

    main.adb:179:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (2 => ''0'',
    3 => ''0'', 4 => ''0'', others => ''0''))) [possible explanation: loop at line
    61 should mention VariableName and DB in a loop invariant][#13]

    main.adb:189:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#12]

    main.adb:192:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''0''))) [possible explanation: loop at line 61 should
    mention Stack in a loop invariant][#11]

    main.adb:200:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''0'')))[#10]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:50:03.871000'
'2021-05-18T21:52:46.186000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:50:10: medium: "LockedState" might not be initialized[#3]

    main.adb:80:13: medium: "LockedState" might not be initialized[#2]

    main.adb:84:50: medium: precondition might fail, cannot prove S(I) >= ''0'' (e.g.
    when I = 1 and Input = (Length => 4, Str => (others => ''NUL'')))[#4]

    main.adb:86:45: medium: "PINOriginal" might not be initialized[#1]

    main.adb:102:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (others => '':'') and InputPINString''First =
    1 and InputPINString''Last = 4) [possible explanation: loop at line 49 should
    mention InputPINString in a loop invariant][#5]

    main.adb:124:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:142:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#11]

    main.adb:144:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#14]

    main.adb:146:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#13]

    main.adb:149:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#12]

    main.adb:163:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#10]

    main.adb:167:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#9]

    main.adb:177:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#8]

    main.adb:180:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''NUL''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#7]

    main.adb:188:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#6]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:52:46.186000'
'2021-05-18T21:54:32.002000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:84:50: medium: precondition might fail, cannot prove S(I) >= ''0'' (e.g.
    when I = 1 and Input = (Length => 4, Str => (others => ''NUL'')))[#2]

    main.adb:86:45: medium: "PINOriginal" might not be initialized[#1]

    main.adb:102:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (others => '':'') and InputPINString''First =
    1 and InputPINString''Last = 4) [possible explanation: loop at line 49 should
    mention InputPINString in a loop invariant][#3]

    main.adb:124:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:142:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#9]

    main.adb:144:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#12]

    main.adb:146:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#11]

    main.adb:149:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#10]

    main.adb:163:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#8]

    main.adb:167:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#7]

    main.adb:177:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#6]

    main.adb:180:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''NUL''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#5]

    main.adb:188:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#4]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:54:32.002000'
'2021-05-18T21:58:24.703000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:21:33: medium: precondition might fail, cannot prove S'' Length = 4[#1]

    main.adb:106:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (others => '':'') and InputPINString''First =
    1 and InputPINString''Last = 4) [possible explanation: loop at line 49 should
    mention InputPINString in a loop invariant][#2]

    main.adb:128:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:146:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#8]

    main.adb:148:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#11]

    main.adb:150:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#10]

    main.adb:153:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#9]

    main.adb:167:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#7]

    main.adb:171:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#6]

    main.adb:181:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#5]

    main.adb:184:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''NUL''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#4]

    main.adb:192:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#3]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:58:24.703000'
'2021-05-18T21:59:28.143000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:106:40: medium: precondition might fail, cannot prove S(I) <= ''9'' (e.g.
    when I = 0 and InputPINString = (others => '':'') and InputPINString''First =
    1 and InputPINString''Last = 4) [possible explanation: loop at line 49 should
    mention InputPINString in a loop invariant][#1]

    main.adb:128:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:146:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#7]

    main.adb:148:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#10]

    main.adb:150:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#9]

    main.adb:153:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#8]

    main.adb:167:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#6]

    main.adb:171:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#5]

    main.adb:181:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#4]

    main.adb:184:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#3]

    main.adb:192:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#2]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T21:59:28.143000'
'2021-05-18T22:00:38.409000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:128:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:146:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#6]

    main.adb:148:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#9]

    main.adb:150:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#8]

    main.adb:153:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#7]

    main.adb:167:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#5]

    main.adb:171:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#4]

    main.adb:181:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:184:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:192:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T22:00:38.409000'
'2021-05-18T22:02:45.181000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:126:22: warning: initialization of "poppedInteger" has no effect[#0]

    main.adb:128:36: warning: unused assignment to "poppedInteger"[#1]

    main.adb:146:49: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = Integer''First)[#7]

    main.adb:148:49: medium: overflow check might fail (e.g. when integerA = 1 and
    integerB = Integer''First)[#10]

    main.adb:150:49: medium: overflow check might fail (e.g. when integerA = -2 and
    integerB = 2)[#9]

    main.adb:153:52: medium: overflow check might fail (e.g. when integerA = -1 and
    integerB = 0)[#8]

    main.adb:167:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#6]

    main.adb:171:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#5]

    main.adb:181:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#4]

    main.adb:184:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#3]

    main.adb:192:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#2]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T22:02:45.181000'
'2021-05-18T22:04:57.645000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    main.adb:128:24: too many arguments in call to "SS.Pop"

    main.adb:143:24: too many arguments in call to "SS.Pop"

    main.adb:144:24: too many arguments in call to "SS.Pop"

    main.adb:170:24: too many arguments in call to "SS.Pop"

    simplestack.ads:28:15: "I" is undefined

    simplestack.adb:15:42: not type conformant with declaration at simplestack.ads:25

    simplestack.adb:15:42: too many parameters

    gnatprove: error during generation of Global contracts

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T22:04:57.645000'
'2021-05-18T22:05:34.906000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:128:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:145:84: medium: overflow check might fail (e.g. when integerA = -1)[#9]

    main.adb:148:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#8]

    main.adb:150:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#7]

    main.adb:153:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#6]

    main.adb:167:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#5]

    main.adb:171:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#4]

    main.adb:181:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:184:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:192:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T22:05:34.906000'
'2021-05-18T22:09:35.845000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:84: medium: overflow check might fail (e.g. when integerA = -1)[#9]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#8]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#7]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#6]

    main.adb:172:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#5]

    main.adb:176:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#4]

    main.adb:186:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:189:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:197:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T22:09:35.845000'
'2021-05-18T22:10:11.273000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#9]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#8]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#7]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#6]

    main.adb:172:76: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#5]

    main.adb:176:35: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#4]

    main.adb:186:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:189:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:197:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T22:10:11.273000'
'2021-05-18T22:34:42.298000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#8]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#7]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#6]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#5]

    main.adb:180:41: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#4]

    main.adb:192:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:195:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:203:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T22:34:42.298000'
'2021-05-18T23:03:00.308000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#7]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#6]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#5]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#4]

    main.adb:194:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:197:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:205:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:03:00.308000'
'2021-05-18T23:03:56.773000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#8]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#7]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#6]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#5]

    main.adb:181:44: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#4]

    main.adb:194:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:197:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:205:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:03:56.773000'
'2021-05-18T23:05:46.987000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    main.adb:180:31: prefix for "Length" attribute may not be private type

    gnatprove: error during generation of Global contracts

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:05:46.987000'
'2021-05-18T23:15:15.688000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#8]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#7]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#6]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#5]

    main.adb:181:44: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#4]

    main.adb:194:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:197:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:205:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:15:15.688000'
'2021-05-18T23:16:47.708000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#8]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#7]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#6]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#5]

    main.adb:181:44: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#4]

    main.adb:194:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''1'')))[#3]

    main.adb:197:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:205:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:16:47.708000'
'2021-05-18T23:18:20.307000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#7]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#6]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#5]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#4]

    main.adb:181:44: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#3]

    main.adb:201:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#2]

    main.adb:211:73: medium: precondition might fail, cannot prove S''Length <= Max_Variable_Length
    (e.g. when Input = (Length => 0, Str => (others => ''NUL'')))[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:18:20.307000'
'2021-05-18T23:19:09.374000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#6]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#5]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#4]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#3]

    main.adb:181:44: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#2]

    main.adb:201:24: medium: precondition might fail, cannot prove Size(S) /= Max_Size
    (e.g. when Stack = (storage => (others => 0), size => 0) and VariableName = (Length
    => 0, Str => (others => ''1''))) [possible explanation: loop at line 49 should
    mention Stack in a loop invariant][#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:19:09.374000'
'2021-05-18T23:24:43.618000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:133:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:150:102: medium: overflow check might fail (e.g. when integerA = -1)[#5]

    main.adb:153:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#4]

    main.adb:155:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#3]

    main.adb:158:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#2]

    main.adb:181:44: medium: precondition might fail, cannot prove Length(D) < Max_Entries
    or Has_Variable(D,V) (e.g. when VariableName = (Length => 0, Str => (others =>
    ''NUL''))) [possible explanation: loop at line 49 should mention VariableName
    and DB in a loop invariant][#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:24:43.618000'
'2021-05-18T23:30:21.009000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    main.adb:108:36: "StackSize" is undefined (more references follow)

    gnatprove: error during generation of Global contracts

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:30:21.009000'
'2021-05-18T23:30:56.962000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:129:36: warning: unused assignment to "poppedInteger"[#0]

    main.adb:146:102: medium: overflow check might fail (e.g. when integerA = -1)[#4]

    main.adb:149:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#3]

    main.adb:151:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#2]

    main.adb:154:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#1]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:30:56.962000'
'2021-05-18T23:46:24.526000':
  category: GNATprove
  files:
  - D:\CodeRepo\GnatAdaCalculator\obj\gnatprove
  label: Basic Prove File
  output: 'Phase 1 of 2: generation of Global contracts ...

    Phase 2 of 2: flow analysis and proof ...

    main.adb:142:102: medium: overflow check might fail (e.g. when integerA = -1)[#3]

    main.adb:145:49: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = -2)[#2]

    main.adb:147:49: medium: overflow check might fail (e.g. when integerA = 2 and
    integerB = -2)[#1]

    main.adb:150:52: medium: overflow check might fail (e.g. when integerA = Integer''Last
    and integerB = 0)[#0]

    Summary logged in D:\CodeRepo\GnatAdaCalculator\obj\gnatprove\gnatprove.out

    '
  output_parser: GNATprove_Parser
  timestamp: '2021-05-18T23:46:24.526000'
